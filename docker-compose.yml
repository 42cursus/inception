#pour lancer 
#docker-compose up -d --build
version: "3"
#on pourrait preciser la version 3.3, attention c est dependant de la version de dockers

#Dans chaque bloc de servcice on a un conteneur declare/decrit
#3 grandes etapes - les services, les networks, les volumes

#LAMP Stack
services:
    #On doit modifier la config de nginx pour pouvoir acceder a notre /var/www/html
    nginx:
        #base OS Alpine linux, perfect for containers
        image: nginx:stable-alpine
        ports:
            #Visiting the 80 port on the localhost should display what is on the container
            - 80:80
        #Les volumes nous permettront d'avoir acces a nos fichiers wordpress
        #Les volumes se comportent comme des liens symboliques entre notre machine et le container
        #delegated est une option qui nous permet de speed up le time sur les system macOS
        volumes:
            - ./wordpress:/var/www/data/html:delegated
            #En faisant ca on remplace le fichier nginx par defaut
            - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    mysql:
        image: mariadb
        #mounts the host machine path /data/mysql in the container path /var/lib/mysql
        #enables all our DB files to be stored in the host machine instead of the container. 
        #we need to prepare this directory for usage by our container
        #in the MariaDB container, the /var/lib/mysqk is owned by the user mysql.
        #The uid of this user in the container is 999. ! It is not the same in the host machine. 
        #The following commands delete any existing user with the name mysql and create a new user with the uid 999. 
        #sudo userdel mysql
        #sudo useradd -u 999 mysql
        volumes:
            - data/mysql:/var/lib/mysql
        environment:
            #MYSQL expects these env variables
            MYSQL_DATABASE: db_name
            MYSQL_USER: user_name
            MYSQL_PASSWORD: user_pass
            MYSQL_ROOT_PASSWORD: mysql_root_pass
        restart: always
    #PHP a besoin d'avoir les memes volume information que nginx
    #on veut un contenir UNIQUE wordpres/php et pas deux containers

        
    wordpress:
        image: wordpress:php7.3-fpm-alpine
        volumes:
            - /data/html:/var/www/html
        #services are started and stopped in the dependency order
        depends_on:
            - mysql
        #The environmennt variable from Wordpress MUST match with the MYSQL ones. 
        environment:
            WORDPRESS_DB_HOST: mysql
            MYSQL_ROOT_PASSWORD: mysql_root_pass
            WORDPRESS_DB_NAME: db_name
            WORDPRESS_DB_USER: user_name
            WORDPRESS_DB_PASSWORD: user_pass
            WORDPRESS_TABLE_PREFIX: wp_
        #Enables wordpress to 
        links:
            - mysql
        restart: always
    # php:
    #     #image: php:7.4-fpm-alpine
    #     build:
    #         #the directory to look for the dockerfile in
    #         context: .
    #         dockerfile: php.Dockerfile
    #     volumes:
    #         - ./wordpress:/var/www/html:delegated
    #     links:
    #         - mysql

    #Changer pour mettre mariadb
    #Si on est au sein du meme reseau les ports vont etre accessible depuis les differents services
    # db:
    #     container_name: mysql
    #     image: mysql:5.7
    #     volumes:
    #      - wp_db:/var/lib/mysql/
    #     #voir quelle option est la meilleures
    #     restart: always
    #     #variables d'environnement
    #     environment:
    #         #La on va definir les informations pour le root user
    #         #nous permet d eviter de lancer un scripts
    #         MYSQL_ROOT_PASSWORD: somewordpress
    #         #par defaut wordpress attend une base de donnee nommee wordpress
    #         MYSQL_DATABASE: wordpress
    #         MYSQL_USER: wordpress
    #         MYSQL_PASSWORD: wordpress
    #     #Les reseaux vont permettre de faire communiquer les services
    #     #Ils appartiennent a un seul et unique reseau pour l instant
    #     networks:
    #         - wp

    # wordpress:
    #     #depends on signifie que ce service ne se lance que si le service dont il depend est lance
    #     depends_on:
    #         - db 
    #     container_name: wordpress
    #     image: wordpress:latest
    #     #wordpress stocke tout un tas de fichier qui considerera comme nos "statiques"
    #     #On monte un volume dans la localisation suivie du :
    #     volumes:
    #         - wp_statics:/var/www/html/
    #     #pour le wordpress specifiquement on va rediriger le port 80 vers le port 8000
    #     ports:
    #         - 8000:80
    #     #variables d'environnement
    #     environnement:
    #         WORDPRESS_DB_HOST: dd:3306
    #         WORDPRESS_DB_USER: wordpress
    #         WORDPRESS_DB_PASSWORD: wordpress
    #     networks:
    #         - wp


    # webserver:
    #     build:
    #         context: .
    #         dockerfile: Dockerfile_Nginx
    #     image: nginx
    #     container_name: webserver
    #     restart: unless-stopped
    #     ports:
    #     #Default nginx port 80 (our side: our container side)
    #      - "8080:80"
    #     #apres les : il doit y avoir un chemin absolu
    #     volumes:
    #      - ./:/var/www
    #      - ./nginx/:/etc/nginx/conf.d/
    #     depends_on:
    #         - app

        #tests pour php
    # app:
    #     build:
    #         context: . 
    #         dockerfile: Dockerfile 
    #     image: inception 
    #     container_name: app
    #     restart: unless-stopped
    #     volumes:
    #     #Kind of like a symbolic link
    #      - ./:/var/www

# network:
#     wp:

# #declaration des volumes -> c'est Docker qui va gerer les droits des repertoires
# #Grace a docker-compose
# volumes:
#     wp_db:
#         driver: local
#         driver_opts:
#             o: bind
#             type: none
#             #Localisation sur la machine 
#             device: /srv/wordpress/db
#     wp_statics:
#         driver: local
#         driver_opts:
#             o: bind
#             type: none
#             device: /srv/wordpress/statics 
